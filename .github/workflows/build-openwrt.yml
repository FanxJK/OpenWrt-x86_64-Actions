#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      clean_cache:
        description: 'Clean Cache'
        required: false
        type: choice
        options:
          - "false"
          - "true"
        default: "false"
      upload_release:
        description: 'Upload Release'
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "true"

env:
  REPO_NAME: immortalwrt/immortalwrt
  BUILD_VER: "24.10"
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: ${{ github.event.inputs.upload_release }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: write

    steps:

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /etc/mysql /etc/php /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost /usr/local/graalvm /usr/local/share/powershell /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules /opt/az /opt/microsoft /usr/share/swift
        sudo docker image prune --all --force
        sudo apt-get clean
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
          libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
          nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
          python3-docutils python3-pyelftools qemu-utils rclone re2c rsync scons squashfs-tools subversion swig \
          texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        REPO_URL="https://github.com/$REPO_NAME.git"
        REPO_TAG=$(curl -H "Authorization: Bearer ${{ secrets.MY_SECRETS_TOKEN }}" \
        -sX GET "https://api.github.com/repos/$REPO_NAME/tags" | awk -F '"' '/name/{print $4}' | grep $BUILD_VER | head -n 1)
        echo "REPO_TAG=$REPO_TAG" >> $GITHUB_ENV
        echo "Build Version: $REPO_TAG"
        git clone $REPO_URL -b $REPO_TAG --depth=1 --single-branch openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "After clone:"
        df -hT

    - name: Setup rclone for R2
      run: |
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf << EOF
        [r2]
        type = s3
        provider = Cloudflare
        access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
        secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
        endpoint = ${{ secrets.R2_ENDPOINT }}
        EOF

    - name: Clean R2 cache
      if: ${{ github.event.inputs.clean_cache == 'true' }}
      run: |
        echo "Cleaning R2 cache..."
        rclone delete r2:openwrt/ccache.tar.zst --progress || echo "No ccache to clean"
        rclone delete r2:openwrt/dl.tar.zst --progress || echo "No dl cache to clean"
        rclone delete r2:openwrt/staging_dir.tar.zst --progress || echo "No staging_dir cache to clean"
        rclone delete r2:openwrt/build_dir.tar.zst --progress || echo "No build_dir cache to clean"
        echo "R2 cache cleaned!"

    - name: Download cache from R2
      if: ${{ github.event.inputs.clean_cache != 'true' }}
      run: |
        echo "Downloading cache from Cloudflare R2..."
        cd openwrt
        
        # Download and extract ccache
        if rclone ls r2:openwrt/ccache.tar.zst 2>/dev/null; then
          echo "Downloading ccache..."
          rclone copy r2:openwrt/ccache.tar.zst . --progress
          if [ -f ccache.tar.zst ]; then
            echo "Extracting ccache..."
            tar --zstd -xf ccache.tar.zst && rm ccache.tar.zst
          fi
        else
          echo "No ccache found, starting fresh"
        fi
        
        # Download and extract dl cache
        if rclone ls r2:openwrt/dl.tar.zst 2>/dev/null; then
          echo "Downloading dl cache..."
          rclone copy r2:openwrt/dl.tar.zst . --progress
          if [ -f dl.tar.zst ]; then
            echo "Extracting dl cache..."
            tar --zstd -xf dl.tar.zst && rm dl.tar.zst
          fi
        else
          echo "No dl cache found"
        fi
        
        # Download and extract staging_dir
        if rclone ls r2:openwrt/staging_dir.tar.zst 2>/dev/null; then
          echo "Downloading staging_dir cache..."
          rclone copy r2:openwrt/staging_dir.tar.zst . --progress
          if [ -f staging_dir.tar.zst ]; then
            echo "Extracting staging_dir cache..."
            tar --zstd -xf staging_dir.tar.zst && rm staging_dir.tar.zst
          fi
        else
          echo "No staging_dir cache found"
        fi
        
        # Download and extract build_dir
        if rclone ls r2:openwrt/build_dir.tar.zst 2>/dev/null; then
          echo "Downloading build_dir cache..."
          rclone copy r2:openwrt/build_dir.tar.zst . --progress
          if [ -f build_dir.tar.zst ]; then
            echo "Extracting build_dir cache..."
            tar --zstd -xf build_dir.tar.zst && rm build_dir.tar.zst
          fi
        else
          echo "No build_dir cache found"
        fi

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Re Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Add Github release Tag to firmware
      run: |
        cd openwrt
        BUILD_DATE=$(date +"%Y.%m.%d")
        echo "RELEASE_TAG=${{ env.REPO_TAG }}-$BUILD_DATE" >> $GITHUB_ENV
        echo "DISTRIB_GITHUBVER='${{ env.REPO_TAG }}-$BUILD_DATE'" >> package/base-files/files/etc/openwrt_release

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Free up space before compile
      run: |
        # Clean up unnecessary files to free space
        sudo apt-get clean
        sudo apt-get autoremove -y --purge
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/* /var/tmp/*
        sudo rm -rf /var/log/*.log /var/log/*/*.log
        # Clean docker and containers
        sudo docker system prune -af --volumes
        # Clean snap cache if exists
        sudo rm -rf /var/lib/snapd/cache/* || true
        # Clean journal logs
        sudo journalctl --vacuum-time=1d || true
        # Remove unnecessary documentation and man pages
        sudo rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/info/*
        # Show available space
        df -hT

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc) + 1)) || make -j$(nproc) V=s || make -j1 V=s
        echo "COMPILE_STATUS=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload cache to R2
      if: (!cancelled())
      run: |
        echo "Uploading cache to Cloudflare R2..."
        cd openwrt
        
        # Compress and upload ccache
        if [ -d ".ccache" ]; then
          echo "Compressing and uploading ccache..."
          tar --zstd -cf ccache.tar.zst .ccache
          rclone copy ccache.tar.zst r2:openwrt/ --progress
          rm ccache.tar.zst
        fi
        
        # Compress and upload dl cache
        if [ -d "dl" ]; then
          echo "Compressing and uploading dl cache..."
          tar --zstd -cf dl.tar.zst dl
          rclone copy dl.tar.zst r2:openwrt/ --progress
          rm dl.tar.zst
        fi
        
        # Compress and upload staging_dir
        if [ -d "staging_dir" ]; then
          echo "Compressing and uploading staging_dir cache..."
          tar --zstd -cf staging_dir.tar.zst staging_dir
          rclone copy staging_dir.tar.zst r2:openwrt/ --progress
          rm staging_dir.tar.zst
        fi
        
        # Compress and upload build_dir
        if [ -d "build_dir" ]; then
          echo "Compressing and uploading build_dir cache..."
          tar --zstd -cf build_dir.tar.zst build_dir
          rclone copy build_dir.tar.zst r2:openwrt/ --progress
          rm build_dir.tar.zst
        fi
        
        echo "Cache upload completed!"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: ${{ env.COMPILE_STATUS }} == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "ORANIZE_STATUS=success" >> $GITHUB_ENV

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: ${{ env.ORANIZE_STATUS }} == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create release
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_STATUS=success" >> $GITHUB_ENV

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: ${{ env.RELEASE_STATUS }} == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        body_path: ${{ github.workspace }}/.github/CHANGELOG.txt
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ github.token }}
