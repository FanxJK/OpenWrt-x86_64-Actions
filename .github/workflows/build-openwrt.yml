#
# This workflow builds ImmortalWrt firmware using the official Image Builder.
# It determines the latest release tag from the ImmortalWrt repository based on
# the configured BUILD_VER prefix (e.g. 24.10) and then downloads the matching
# Image Builder tarball for the x86/64 target.  The workflow parses the
# provided .config to generate a package list and uses the Image Builder to
# assemble a custom firmware image without compiling the entire source tree.
# This reduces build time and CPU usage significantly compared to a full
# toolchain build.

name: Build ImmortalWrt with Image Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      clean_cache:
        description: 'Clean cache (not used when using Image Builder)'
        required: false
        default: "false"

env:
  # Upstream repository and version prefix.  BUILD_VER is used to
  # select the most recent tag that begins with this value, e.g. v24.10.2.
  REPO_NAME: immortalwrt/immortalwrt
  BUILD_VER: "24.10"
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  # Use the Asia/Shanghai timezone by default; adjust as necessary.
  TZ: Asia/Shanghai
  # Target architecture for Image Builder.  We build x86/64 firmware here.
  TARGET_ARCH: "x86/64"

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Set up build environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -qq
          # Install only the tools needed for image builder: git, curl, wget,
          # make, tar, and zstd.  We do not install the full toolchain used
          # for compiling the kernel and packages because the Image Builder
          # includes prebuilt binaries.
          sudo apt-get install -y git curl wget make tar zstd
          # Set timezone for reproducible builds
          sudo timedatectl set-timezone "$TZ"
          # Prepare the working directory and adjust permissions
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone ImmortalWrt source and generate config
        working-directory: /workdir
        run: |
          set -eo pipefail
          # Determine the latest tag matching BUILD_VER (e.g. v24.10.2)
          REPO_URL="https://github.com/${REPO_NAME}.git"
          REPO_TAG=$(curl -s https://api.github.com/repos/${REPO_NAME}/tags \
            | grep -oP '"name":\s*"\K[^\"]+' \
            | grep "${BUILD_VER}" \
            | head -n 1)
          if [ -z "$REPO_TAG" ]; then
            echo "Failed to determine REPO_TAG from remote repository" >&2
            exit 1
          fi
          echo "Using repository tag: $REPO_TAG"
          echo "REPO_TAG=$REPO_TAG" >> $GITHUB_ENV
          # Clone only the selected tag.  Depth 1 reduces clone time and size.
          git clone --depth=1 --branch "$REPO_TAG" "$REPO_URL" openwrt
          # Link the checked out source into the workspace to reuse existing
          # scripts, configuration files and overlay directories.
          ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"
          # Replace feeds configuration if provided in the root of the repo.
          [ -e "$GITHUB_WORKSPACE/$FEEDS_CONF" ] && mv "$GITHUB_WORKSPACE/$FEEDS_CONF" openwrt/feeds.conf.default || true
          # Execute user-defined pre-feed scripts (DIY part 1) if present.
          chmod +x "$GITHUB_WORKSPACE/$DIY_P1_SH"
          (cd openwrt && "$GITHUB_WORKSPACE/$DIY_P1_SH")
          # Update and install all feeds; this is required so that defconfig can
          # find all selectable packages when generating the final .config.
          (cd openwrt && ./scripts/feeds update -a)
          (cd openwrt && ./scripts/feeds install -a)
          # Copy overlay files and user configuration (.config) if present.
          [ -d "$GITHUB_WORKSPACE/files" ] && cp -r "$GITHUB_WORKSPACE/files" openwrt/files || true
          [ -e "$GITHUB_WORKSPACE/$CONFIG_FILE" ] && cp "$GITHUB_WORKSPACE/$CONFIG_FILE" openwrt/.config || true
          # Execute user-defined post-feed scripts (DIY part 2) if present.
          chmod +x "$GITHUB_WORKSPACE/$DIY_P2_SH"
          (cd openwrt && "$GITHUB_WORKSPACE/$DIY_P2_SH")
          # Normalize the configuration.  make defconfig expands and
          # completes all option dependencies according to feeds and defaults.
          (cd openwrt && make defconfig)
          # Extract the list of explicitly enabled packages from the .config.
          # Image Builder accepts a whitespace-separated list of packages.
          PACKAGE_LIST=$(grep '^CONFIG_PACKAGE_' openwrt/.config \
            | grep '=y' \
            | sed -e 's/CONFIG_PACKAGE_//' -e 's/=y//' \
            | tr '\n' ' ' | sed -e 's/\s\{1,\}/ /g')
          echo "PACKAGE_LIST=${PACKAGE_LIST}" >> $GITHUB_ENV
          echo "Detected packages: ${PACKAGE_LIST}"
          # Build release tag for uploads and releases.  We append the current
          # date to the tag to avoid collisions when multiple builds occur.
          BUILD_DATE=$(date +"%Y.%m.%d")
          echo "RELEASE_TAG=${REPO_TAG}-${BUILD_DATE}" >> $GITHUB_ENV
          # Write distribution version into base-files if present, so that
          # firmware identifies itself with the GitHub tag.
          echo "DISTRIB_GITHUBVER='${REPO_TAG}-${BUILD_DATE}'" >> openwrt/package/base-files/files/etc/openwrt_release || true

      - name: Download and extract Image Builder
        working-directory: /workdir
        run: |
          set -eo pipefail
          RELEASE_VERSION="${REPO_TAG#v}"
          IB_FILE="immortalwrt-imagebuilder-${RELEASE_VERSION}-x86-64.Linux-x86_64.tar.zst"
          DOWNLOAD_URL="https://downloads.immortalwrt.org/releases/${RELEASE_VERSION}/targets/x86/64/${IB_FILE}"
          echo "Downloading Image Builder from $DOWNLOAD_URL"
          curl -L --fail -o "$IB_FILE" "$DOWNLOAD_URL"
          # Extract using zstd compression support.  The tar file unpacks to a
          # directory named after the archive without the .tar.zst extension.
          tar -I zstd -xf "$IB_FILE"
          # Normalize the extracted directory name.  The name matches the
          # archive without extension; move it to a generic name for ease of use.
          mv "immortalwrt-imagebuilder-${RELEASE_VERSION}-x86-64.Linux-x86_64" imagebuilder

      - name: Build firmware using Image Builder
        working-directory: /workdir/imagebuilder
        run: |
          set -eo pipefail
          # Copy overlay files into the Image Builder.  The 'files' directory
          # will be merged into the root filesystem when building the image.
          [ -d "$GITHUB_WORKSPACE/files" ] && cp -r "$GITHUB_WORKSPACE/files" ./files || true
          # Display available profiles for reference.  This helps verify
          # that the expected profile (generic) exists.  Not fatal if omitted.
          make info
          # Build the firmware.  We use PROFILE=generic for x86/64 based on
          # profiles.json, and pass the previously parsed PACKAGE_LIST.  The
          # FILES option injects custom files into the image.
          make image PROFILE=generic PACKAGES="${PACKAGE_LIST}" FILES=files
          echo "COMPILE_STATUS=success" >> $GITHUB_ENV
          # Set device name and timestamp variables for artifact naming.  For
          # x86/64 there is no specific device name, so we use _x86_64.
          echo "DEVICE_NAME=_x86_64" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: always()
        run: df -hT

      - name: Organize firmware files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && env.COMPILE_STATUS == 'success'
        run: |
          # For Image Builder, images are stored under bin/targets/<target>/<subtarget>
          cd /workdir/imagebuilder/bin/targets/x86/64
          echo "Firmware directory contents:"
          ls -l
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "ORGANIZE_STATUS=success" >> $GITHUB_ENV

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        if: env.ORGANIZE_STATUS == 'success'
        with:
          name: ImmortalWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}/*

      - name: Create release metadata
        if: env.UPLOAD_RELEASE == 'true' && env.COMPILE_STATUS == 'success'
        run: echo "RELEASE_STATUS=success" >> $GITHUB_ENV

      - name: Upload firmware to GitHub Release
        uses: softprops/action-gh-release@v2
        if: env.RELEASE_STATUS == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: ${{ env.FIRMWARE }}/*
          body: 'Automated build using Image Builder.'

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ github.token }}